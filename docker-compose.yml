version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.5
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.5
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  greenplum:
    container_name: database
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_HOST_AUTH_METHOD=password
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_DBNAME=$POSTGRES_DBNAME
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "$POSTGRES_USER" ]
      interval: 5s
      timeout: 10s
      retries: 5

  fashion-mnist-classifier:
    image: ${DOCKER_IMAGE_TAG_NAME}
    container_name: fashion-mnist-classifier
    build: .
    environment:
      - POSTGRES_HOST_AUTH_METHOD=password
      - ANSIBLE_PASSWORD=$ANSIBLE_PASSWORD
    #      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    #      - POSTGRES_USER=$POSTGRES_USER
    #      - POSTGRES_DBNAME=$POSTGRES_DBNAME
    #      - POSTGRES_DBHOST=greenplum
    #      - POSTGRES_DBPORT=5432
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo 'Running tests...'
      coverage run src/unit_tests/test_datasets.py &&
      coverage run src/unit_tests/test_training_results.py &&
      coverage report -m
      "
    links:
      - "greenplum:database"
      - 'kafka:kafka'
    depends_on:
      greenplum:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully